% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Thu Dec 20 14:01:59 IRST 2012
%
% This script assumes these variables are defined:
%
%   inputs - input data.
%   targets - target data.
clc 
clear 
close all

data=xlsread('EURUSD1440 Waver ANN12 3.csv');
inputs = data(:,7:end-10);
targets = data(:,end-3);

inputs = inputs';
targets = targets';

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
EURUSDD1WaverDirectionNetwork = patternnet([hiddenLayerSize hiddenLayerSize]);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
EURUSDD1WaverDirectionNetwork.inputs{1}.processFcns = {'removeconstantrows','mapminmax'};
EURUSDD1WaverDirectionNetwork.outputs{2}.processFcns = {'removeconstantrows','mapminmax'};


% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
EURUSDD1WaverDirectionNetwork.divideFcn = 'dividerand';  % Divide data randomly
EURUSDD1WaverDirectionNetwork.divideMode = 'sample';  % Divide up every sample
EURUSDD1WaverDirectionNetwork.divideParam.trainRatio = 70/100;
EURUSDD1WaverDirectionNetwork.divideParam.valRatio = 15/100;
EURUSDD1WaverDirectionNetwork.divideParam.testRatio = 15/100;

% For help on training function 'trainlm' type: help trainlm
% For a list of all training functions type: help nntrain
EURUSDD1WaverDirectionNetwork.trainFcn = 'trainlm';  % Levenberg-Marquardt

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
EURUSDD1WaverDirectionNetwork.performFcn = 'mse';  % Mean squared error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
EURUSDD1WaverDirectionNetwork.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
  'plotregression', 'plotfit'};

% EURUSDD1WaverDirectionNetwork.trainParam.max_fail = 15;
% Train the Network
[EURUSDD1WaverDirectionNetwork,tr] = train(EURUSDD1WaverDirectionNetwork,inputs,targets);

% Test the Network
outputs = EURUSDD1WaverDirectionNetwork(inputs);
errors = gsubtract(targets,outputs);
performance = perform(EURUSDD1WaverDirectionNetwork,targets,outputs)

% Recalculate Training, Validation and Test Performance
trainTargets = targets .* tr.trainMask{1};
valTargets = targets  .* tr.valMask{1};
testTargets = targets  .* tr.testMask{1};
trainPerformance = perform(EURUSDD1WaverDirectionNetwork,trainTargets,outputs)
valPerformance = perform(EURUSDD1WaverDirectionNetwork,valTargets,outputs)
testPerformance = perform(EURUSDD1WaverDirectionNetwork,testTargets,outputs)

% View the Network
%view(EURUSDH1CloseDirectionNet)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
figure, plotconfusion(targets,outputs)
figure, plotconfusion(testTargets, outputs.* tr.testMask{1})
%figure, ploterrhist(errors)
save WaverNetworks.mat EURUSDD1WaverDirectionNetwork